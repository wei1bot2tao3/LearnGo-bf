什么是并发
并发是多个程序或者任务在一个机器或CPU上运行，在同一个时间只有一个程序或任务在执行。
微妙级别的 人感知不到

什么是并行
并行是多个程序或任务在多个机器或多CPU上同时运行，在同一时间点真的有多个程序或任务在执行。

案例：统计一本书的字数
eg01——test

Go只有协程
案例：计算素数
寻找200，000以内所有的素数
多个人一起算
什么是goroutine

Goroutine 是golang内部的轻量级的并行技术。Golang通过 go启动
go func(){}
所有的都是goroutine
无感 在main中 主routine
用关键字启动独立的routine
都是并行的 因为主结束太快了 main 结束时候就直接结束了
彼此独立，但是主进程结束了，程序就退出的。
只要个独立routine不沟通就是完全独立的。

Goroutine
轻量级： 2kB，线程至少四MB级别
高性能：没有线程上下文切换，内部实现专用调度器，可以在多个CPU上切换。
易使用：只要go关键字即可启动，不需要关注它生命周期、资源回收等
持久性：只要主进程不退出，goroutine内的功能不结束就不退出。
//当前程序全部
runtime.NumGoroutine()
用来控制goroutine 是靠锁 控制goroutine和主routine
使用
go func(){
wg := sync.WaitGroup{} 是一个计数信号量，用于等待一组并发操作完成。
	wg.Add(5000)通过wg.Add(5000)将计数器设置为5000，表示有5000个并发操作需要等待完成。
	......
	wg.Done() 告诉计数器少一个
	wg.Wait() 阻塞当前goroutine直到计数器的值变成0

}
使用MAP时候风险极其大

锁：
什么是锁
锁是一种保障被锁保护的内容只有在拿到锁之后才能对内容仅需阅读、修改的机制。通常用在多线程，多rutine的环境中保证操作的正确性、安全性。
保护对共享的数据的修改的正确性、
对map数据的并发的读引起的panic
fatal error: concurrent map writes
多个routine对map进行操作就会崩掉
并发对map进行一个写的操作
var box int
使用mutex或lock后缀：
boxlock:=sync.Mutex{}

box.Lock() 锁住部分逻辑
box.Unlock()释放锁

注意：保证Lock和UnLock一定都调用
如果有人没Unlock 那么所有程序都卡在这了
所有放在defer 后
有代价的
被Lock的内容的访问后一定要经过锁的过程进行访问
锁有种类分别
同步锁 种类锁
mutexLocked
上图展示的是一个缓冲区为 8 的 channel buffer，recvx 指向最早被读取的数
据，sendx 指向再次写入时插入的位置。

表示互斥锁的锁定状态；
表示从正常模式被从唤醒；
当前的互斥锁进入饥饿状态；
当前互斥锁上等待的 Goroutine 个数；

同步锁：
锁只能被一个Goroutine拿到
所有的其他Groutine必须等待锁释放后才可以争抢
提高性能 使用完锁就解锁



读写锁：
写锁只有一个routine才能拿到
读锁可以被多个rouutine拿到
读锁和写锁是互斥的
读锁在释放前，拿写锁的routine等待，直到所有的锁释放后才可以拿到锁
用处 ：读多写少

当一个 Goroutine（协程）获得了 Mutex 后，其他 Goroutine（协程）就只能乖
乖的等待，除非该 Goroutine 释放了该 Mutex。RWMutex 在读锁占用的情况下，
会阻止写，但不阻止读 RWMutex。 在写锁占用情况下，会阻止任何其他
Goroutine（无论读和写）进来，整个锁相当于由该 Goroutine 独占
同步锁的作用是保证资源在使用时的独有性，不会因为并发而导致数据错乱，
保证系统的稳定性。

生产者、消费者模型
生产者：
生产数据
生产满等待消费完在继续生产
消费者：
消费数据
没有的话就等生产者生产

共享一个仓库
仓库有锁
eg04_问题：

sync包
sync.WaitGroup: 设置计数器
sync.Add：添加计数器
Sync.Done：减少计数器 （方 go func 里
Sync,wait 等待计数器归零

sync.Once
var once sync.Once = sync.Once{}
once.Do(func() {
		golalRank.standard = standard
		//只会跑一次的
	})


sync.Cond
Wait :我要等到某个条件
Broadcast:广播给所有在这个condWait的routine
Signal:只发送一条信息，只唤醒一个在这个condWait 的routine
一定要 定义不然会空指针
s.cCond = sync.NewCond(&s.lock)


案例：
eg09
sync.Map
m := sync.Map{}
m.Store(i, 1)// 添加
v, ok := m.Load(i) // 读取


无锁编程
不使用锁，但是做到线程安全。
经典案例 ： eg10


正常模式：
竞争模式 保证效率 优势避免CPU调度 一般G1肯定已经占着CPU所以大概率已经拿到锁
饥饿模式：
如果G2等待时间超过1ms 锁变成饥饿模式 ，锁会优先选择队列中的goroutine
要么队列中只剩下一个goroutine，要么G2小于1ms 就会退出饥饿锁

步骤总结
加锁：
一、先上来一个CAS操作，如果这个锁空闲，没人抢直接成功  超快
二、自旋几次 如果成功也不用加入队列 快
三、加入队列 慢
四、从队列中唤醒：
1.正常模式 和新来时的锁一起抢锁，但是大概率失败
2.饥饿模式：肯定拿到锁

退出饥饿锁模式：队列只剩一个goroutine 或者，后面的等待时间小于1ms

CAS什么意思？
CAS是Compare and Swap（比较并交换）的缩写，是一种并发编程中常用的原子操作。
CAS操作包含三个参数：内存地址（或变量）、旧的预期值和新的值。
它的作用是比较内存地址处的值与预期值是否相等，如果相等，则将新的值写入该内存地址；如果不相等，则说明其他线程已经修改了该值，CAS操作失败，不进行写入。
CAS操作通常用于实现无锁的并发控制，特别是在多线程环境下对共享资源的访问。它可以避免使用传统的锁机制（如互斥锁）带来的线程切换和上下文切换的开销，提高并发性能。
在步骤总结中提到的CAS操作是用来检查锁的状态，判断是否空闲。如果CAS操作成功，表示锁空闲，可以获取锁；如果CAS操作失败，表示锁被其他线程占用，需要进行其他操作（如自旋或加入等待队列）。

解锁不能用state来标记 因为state不只是标记加锁和解锁 还有加锁➕饥饿状态

解锁：
先atomic 解锁

使用注意
适合读多写少的场景 double-check
写多读少不如直接加锁
Mutex和RWMutex都是不可重入
什么是可重入：我加一个lock 可以在加一个lock ，不可重入就是加一个lock后不释放就加不了
分布式锁没有读锁这个说法，因为太重了
尽可能用defer来解锁，避免panic后锁没有被释放


sync包 -pool
一般情况下，如果考虑缓存资源，比如说创建好的对象。
sync.Pool会查看自己是否有资源，有则直接返回，没有则创建一个新的
sync.pool会在GC的时候释放缓存的资源

一般是用sync.Pool都是为了复用内存：
它减少了内存分配，也减轻了GC压力（最主要）
少消耗CPU资源（内存分配和GC都是CPU密集操作）
Pool实现类似功能
最简单：用并发安全的队列
队头取，队尾放回去
在队列为空的时候创建新的
问题：队尾和队头都是竞争点依赖锁
避免全局锁
TLB方案 thread-local-buffer
没个线程自己搞一个队列，再来一个共享的队列

Go的方案PMG调度模型
P：Processor 处理器
P在同一时间只有一个G在运行
任何数据绑定在P上，都不需要竞争
没有采用全局共享，采取窃取

























